Git使用：
Git的基本命令:
Git init：将当前目录初始化一个 .git 文件夹，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。
git clone [url]
$ git branch 分支名（develop） ：创建分支。
$ git checkout 分支名（develop）：切换工作区。
$ git checkout -b develop：创建分支后直接切换到新的分支。
$ git branch -a：查询当前所有分支。
$ git push origin 分支名（develop）：将本地develop分支推送到Git服务器，生成远程分支。
$ git fetch origin 分支名（develop）:分支名（develop）：远程分支代码拉取到本地。
$ git status:检查工作区是否还有未处理的代码和文件。
$ git commit -a -m "（这里为备注）":将当前分支的修改的存到暂存区，之后可以push到远程Git仓库。

$ git log -p master.. origin/分支名（develop）比较本地的仓库和远程参考的区别。
$ git merge origin/分支名（develop） 把远程下载下来的代码合并到本地仓库，远程的和本地的合并。
此时Alice和Bob就可以切到本地develop分支进行开发了（git checkout develop）。 
1. 开发过程中每个工程师在推送代码之前要先执行拉取操作，因为远程仓库有更新的话，
不先拉取（pull/fetch）是无法推送（push）的，尽量少使用git pull进行拉取，而是先用git fetch拉取在进行git merge。 

2. 在每个开发阶段都及时地提交代码（git commit）并推送（git push）至远程仓库，
可以使用git status检查工作区是否还有未处理的代码和文件。
在提交代码的时候写好优秀的注释（git commit file -m 'Alice fix bug in filename'）。 

3. 在项目代码将要合并到主干master的时候，要由一名工程师做最后的合并处理，
如创建分支的Alice。由于在合并代码时极易产生冲突，所以一定要先与主干代码版本做对比（git diff），
合并时可以使用git merge，当然如果develop可以废除的话，也可以使用git rebase做最后的合并。 

4. 最后在分支代码合并到主干或者代码上线后，develop分支完成了自己的任务，可以删除本地分支和远程分支。 

$ git branch -d 分支名（develop）：删除本地分支。
$ git push origin --delete 分支名（develop）：删除远程分支。

根据他人使用经验总结。
